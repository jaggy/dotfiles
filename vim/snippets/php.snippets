snippet php
	<?php ${0} ?>

snippet fun
	/**
	 * ${1:description}
	 */
	${2:public} function ${3:function_name}(${4}) ${5}
	{
		${0}
	}

snippet lbt
	public function ${2:function_name}() : \Illuminate\Database\Eloquent\Relations\BelongsTo
	{
		return $this->belongsTo(${1}::class);
	}

snippet lbtm
	public function ${2:function_name}() : \Illuminate\Database\Eloquent\Relations\BelongsToMany
	{
		return $this->belongsToMany(${1}::class);
	}

snippet lhm
	public function ${2:function_name}() : \Illuminate\Database\Eloquent\Relations\HasMany
	{
		return $this->hasMany(${1}::class);
	}


snippet ifun
	/**
	 * ${2:description}
	 */
	public function ${1:function_name}(${3});

snippet construct
	/**
	 * Create a new ${1:class}.
	 */
	public function __construct(${2})
	{
		${0}
	}

snippet dbc
	/**
	 * ${1}
	 *
	 * @package     ${2}
	 * @author      Jaggy Gauran <poke@jag.gy>
	 * @license     ${3:http://opensource.org/licenses/MIT The MIT License (MIT)}
	 * @version     Release: ${4:0.1.0}
	 * @link        http://github.com/${5}
	 * @since       Class available since Release ${6:0.1.0}
	 */

snippet cls
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), 'v^w+/(u)', '1', ''), '/', '\\\\', 'g')`};

	class ${2:`Filename('', 'myClass')`}
	{
		${3}
	}

snippet stc
	Schema::create('${1:table}', function (Blueprint $table)
	{
		$table->increments('id');

		${0}

		$table->timestamps();
	});

snippet std
	Schema::drop('${1:table}');${0}

snippet f
	$table->${1:string}('${2:field}')${3:->nullable()};

snippet rg
	$router->group([${1:parameters}], function ($router) {

		${0}

	});

snippet rr
	$router->resource('${1:resource}', '${2}Controller');${0}

snippet lmodel
	<?php

	namespace ${1};

	class ${2} extends Model
	{
		/**
		 * Table name.
		 *
		 * @type string
		 */
		protected $table = '${6}';

		/**
		 * Mass assignment protection.
		 *
		 * @type array
		 */
		protected $fillable = [];
	}

snippet lcontroller
	<?php

	namespace ${1};

	class ${2}Controller extends Controller
	{
		${0}
	}

snippet lrequest
	<?php

	namespace ${1};

	class ${3}Request extends Request
	{
		/**
		 * Determine if the user is authorized to make this request.
		 *
		 * @return boolean
		 */
		public function authorize() : bool
		{
			return false;
		}


		/**
		 * Get the validation rules that apply to the request.
		 *
		 * @return array
		 */
		public function rules() : array
		{
			return [];
		}
	}

snippet taio
	$this->assertInstanceOf('${1}', ${2});

snippet tae
	$this->assertEquals('${1}', ${2});

snippet tat
	$this->assertTrue(${1});

snippet taf
	$this->assertFalse(${1});

snippet foreign
	$table->integer('$1')->unsigned()->index();
	$table->foreign('${1:key}')->references('id')->on('${2:table}')->onDelete('${3:cascade}');

snippet dp
	/*
	|--------------------------------------------------------------------------
	| ${1}
	|--------------------------------------------------------------------------
	|
	| ${2}
	|
	*/

snippet factory
	$factory->define(${1:class}::class, function ($faker) ${2:use ($factory) }{
		return [
			${0}
		];
	});

snippet fore
	foreach (${1:iterator} as ${2:\$key}${3:\ => \$value}) {
		${0}
	}

snippet vd
	var_dump(${0});
