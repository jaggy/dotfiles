priority 1

#----------------------------------------------------------
# Class Definitions
#----------------------------------------------------------
#
snippet lm "Laravel Model"
<?php

namespace ${1:App}`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = '\\' +  m.group().replace('/', '\\')
`;

class `!p snip.rv=snip.basename` extends Model
{
	$0
}
endsnippet

snippet lc "Laravel Controller"
<?php

namespace ${1:App}`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = '\\' +  m.group().replace('/', '\\')
`;

class `!p snip.rv=snip.basename` extends Controller
{
	public function __construct()
	{
		$0
	}
}
endsnippet

#----------------------------------------------------------
# Router
#----------------------------------------------------------
#

snippet rr "Router Resource"
Route::resource('${1:name}', '${2:${1/\w+\s*/\u$0/g}}Controller');
endsnippet

snippet rrp "Router Resource with Parameters"
Route::resource('${1:name}', '${2:${1/\w+\s*/\u$0/g}}Controller', [
	'only' => [$0]
]);
endsnippet

snippet rg "Router Group"
Route::group(function ($router) {
	$0
});
endsnippet

snippet rc "Router Closure"
Route::get('${1:url}', ['as' => '${2}', function () {
	$0
}]);
endsnippet

#----------------------------------------------------------
# Factory
#----------------------------------------------------------
#
snippet fd "Model Factory"
$factory->define(${1}::class, function (Faker\Generator $faker) {
	return [
		$0
	];
});
endsnippet

snippet fc "Create a new factory object"
factory(${1:App\\${3:ClassName}}::class)->create(${3:[]});
endsnippet

#----------------------------------------------------------
# Schema
#----------------------------------------------------------
#
snippet f "Create a field"
$table->${1:string}('${2:field}')${3:->nullable()};$0
endsnippet

snippet fk "Create a foreign field"
$table->integer('${1:foreign_key}')->unsigned();
$table->foreign('$1')->references('id')->on('${2:${1/_id/s/g}}')->onDelete('cascade');$0
endsnippet

snippet sc "Create a table"
Schema::create('${1}', function (Blueprint $table) {
	$table->increments('id');

	$0

	$table->timestamps();
});
endsnippet

snippet sd "Drop the table"
Schema::drop('${1}');
endsnippet

#----------------------------------------------------------
# Relations
#----------------------------------------------------------
#
snippet btm "Belongs to Many"
public function ${2:${1/\w+\s*/\l$0/g}s}()
{
	return $this->belongsToMany(${1:model}::class$0);
}
endsnippet

snippet bt "Belongs to"
public function ${2:${1/\w+\s*/\l$0/g}s}()
{
	return $this->belongsTo(${1:model}::class$0);
}
endsnippet

snippet hm "Has many"
public function ${2:${1/\w+\s*/\l$0/g}s}()
{
	return $this->hasMany(${1:model}::class$0);
}
endsnippet
