snippet aio
\$this->assertInstanceOf(${1}::class, ${2:\$actual});
endsnippet

snippet ae
\$this->assertEquals('${1:\$expected}', ${2:\$actual});
endsnippet

snippet ane
\$this->assertNotEquals('${1:\$expected}', ${2:\$actual});
endsnippet

snippet at
\$this->assertTrue(${1:\$actual});
endsnippet

snippet af
\$this->assertFalse(${1:\$actual});
endsnippet

snippet an
\$this->assertNull(${1:\$actual});
endsnippet

snippet tc "Base Test"
<?php

class `!p snip.rv=snip.basename` extends $1TestCase
{
	$2
}
endsnippet

snippet ftc "Functional Test"
<?php

class `!p snip.rv=snip.basename` extends FunctionalTestCase
{
	$2
}
endsnippet

snippet wt "Test Function"
/**
 * ${1:test description}.
 *
 * @test
 */
function ${1/ /_/g}()
{
	$0
}
endsnippet
