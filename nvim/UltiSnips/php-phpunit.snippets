snippet aio
\$this->assertInstanceOf(${1}::class, ${2:\$actual});
endsnippet

snippet ae
\$this->assertEquals('${1:\$expected}', ${2:\$actual});
endsnippet

snippet ane
\$this->assertNotEquals('${1:\$expected}', ${2:\$actual});
endsnippet

snippet at
\$this->assertTrue(${1:\$actual});
endsnippet

snippet af
\$this->assertFalse(${1:\$actual});
endsnippet

snippet an
\$this->assertNull(${1:\$actual});
endsnippet

snippet tc "Base Test"
<?php

namespace Test`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = '\\' +  m.group().replace('/', '\\')
`;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class `!p snip.rv=snip.basename` extends TestCase
{
	use RefreshDatabase;

	$2
}
endsnippet

snippet test "Test Function"
/** @test **/
function ${1/ /_/g}()
{
	${1:test description}$0
}
endsnippet
