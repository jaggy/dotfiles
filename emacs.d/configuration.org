#+TITLE: Emacs Configuration

/Soooo/, I'm trying Evil.. This is gonna be loads of fun.

* Package Management

Setting up the package management.

#+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

    (setq package-enable-at-startup nil)
    (package-initialize)
#+END_SRC

* Dependencies

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(package-selected-packages
       (quote
        (
            evil evil-leader evil-surround evil-visualstar
            helm 
            php-mode web-mode flycheck
            yasnippet key-chord neotree projectile powerline relative-line-numbers 
        )
       )))
    (custom-set-faces
     )
#+END_SRC

* Editor Config

Just the basic editor config.

#+BEGIN_SRC emacs-lisp
    (setq indent-tabs-mode nil)
    (setq org-src-fontify-natively t)
    (menu-bar-mode -1)
    (global-relative-line-numbers-mode)
    (setq-default indent-tabs-mode nil)
    ;; (setq whitespace-style '(trailing tabs newline tab-mark newline-mark))
#+END_SRC

* Evil Mode

Every Villain is Lemons

#+BEGIN_SRC emacs-lisp
    (global-evil-leader-mode)
    (evil-mode 1)
    (global-evil-surround-mode 1)

#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
    (projectile-global-mode)
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

* [[https://github.com/joaotavora/yasnippet][yasnippet]]
  
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    (yas-global-mode 1)
#+END_SRC
  
* Keybindings

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd ";") 'evil-ex)
    (define-key evil-normal-state-map (kbd "C-w |") 'split-window-horizontally)
    (define-key evil-normal-state-map (kbd "C-w -") 'split-window-vertically)

    (setq key-chord-two-keys-delay 0.4)

    (key-chord-define evil-insert-state-map (kbd "0-") (kbd "->"))
    (key-chord-define evil-insert-state-map (kbd "-=") (kbd "=>"))

    (key-chord-mode 1)
#+END_SRC
  
* Custom Functions

** Fetch the Namespace

#+BEGIN_SRC emacs-lisp
    (defun find-git-repo (dir)
        (if (string= "/" dir)
            nil
            (if (file-exists-p (expand-file-name ".git/" dir))
                dir
            (find-git-repo (expand-file-name "../" dir)))))

    (defun find-project-root ()
        (interactive)
        (if (ignore-errors (eproject-root))
            (eproject-root)
            (or (find-git-repo (buffer-file-name)) (file-name-directory (buffer-file-name)))))

    (defun file-path-to-namespace ()
        (interactive)
        (let (
                (root (find-project-root))
                (base (file-name-nondirectory buffer-file-name))
                )
            (capitalize (substring (replace-regexp-in-string "/" "\\" (substring buffer-file-name (length root) (* -1 (length base))) t t) 0 -1))
            )
        )

#+END_SRC
  
* Extras

#+BEGIN_SRC emacs-lisp
    (powerline-default-theme)
#+END_SRC
