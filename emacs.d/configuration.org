#+TITLE: Emacs Configuration

I'm moving from vim after a few years 'cause I watched [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Aaron Bieber's talk]] about using Evil mode.

Kinda want to try all of this out since LISP is much more manageable than VimL TBH. ¯\_(ツ)_/¯

Using Org Mode as the config though, I learned it from [[https://www.youtube.com/watch?v=SzA2YODtgK4&t=3041s][Harry Schwart's Org Mode talk]].

* Package List!
  
Just followed the package list from [[http://blog.aaronbieber.com/2015/05/24/from-vim-to-emacs-in-fourteen-days.html]["From Vim to Emacs in Fourteen Days"]].

#+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

    (setq package-enable-at-startup nil)
    (package-initialize)
#+END_SRC

* The Things We Depend On
  
I wish I knew how to clean this up more. I need to lookup how other people do this scheisse.

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(package-selected-packages
       (quote
        (
            evil evil-leader evil-surround evil-visualstar
            helm
            php-mode web-mode flycheck
            yasnippet key-chord neotree projectile powerline relative-line-numbers
        )
       )))
    (custom-set-faces
     )
#+END_SRC

* The Basics
 
Everything that's about the editor's behavior.

** Use Spaces. Suck it Richard!
   
It's all the same when it runs through the compiler.

#+BEGIN_SRC emacs-lisp
    (setq indent-tabs-mode nil)
#+END_SRC

** Syntax Highlight Org Blocks
   
Let's make everything pretty.

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
#+END_SRC

** Minimalize

Just keep everything simple.

#+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (global-relative-line-numbers-mode)
#+END_SRC

** Backups Clutter the Filesystem
  
 Just use `/tmp` for the backups and the autosaves. It's so freakin' annoying. (╯°□°）╯︵ ┻━┻
  
#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

* Before The Evil
  
Pre-configure the editor before we enable evil mode.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

* Every Villain is Lemons
  
Everything Evil specific would be here.

Let's make everything feel a bit more vim-like shall we?

#+BEGIN_SRC emacs-lisp
    (global-evil-leader-mode)
    (evil-mode 1)
    (global-evil-surround-mode 1)
#+END_SRC

* Plugin Config
** [[https://github.com/bbatsov/projectile][Projectile: Fuzzy Finder]]
   
FZF alternative here.

TODO: Find a wawy to enable fuzzy finding. It's annoying that it's sequential.

#+BEGIN_SRC emacs-lisp
    (projectile-global-mode)
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

** [[https://github.com/joaotavora/yasnippet][yasnippet]]

#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    (yas-global-mode 1)
#+END_SRC

* Keybindings
** Vim-esque
*** Colon Cancer
    
I /really/, /really/ hate pressing shift to open up the ex menu.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd ";") 'evil-ex)
#+END_SRC

*** Panel Management
   
#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-w |") 'split-window-horizontally)
    (define-key evil-normal-state-map (kbd "C-w -") 'split-window-vertically)
#+END_SRC
    
** Inserting with [[https://www.emacswiki.org/emacs/KeyChord][Key Chord]]
   
Not sure if the delay'll be fine.

#+BEGIN_SRC emacs-lisp
    (setq key-chord-two-keys-delay 0.4)

    (key-chord-define evil-insert-state-map (kbd "0-") (kbd "->"))
    (key-chord-define evil-insert-state-map (kbd "-=") (kbd "=>"))

    (key-chord-mode 1)
#+END_SRC

* Custom Functions
  
Should this really be placed in this org file?

** PHP Namespaces
   
I need to detect namespaces dynamically for my PHP files and I ran across [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][this article]].

Don't really know how it works so I'll just paste it all here.

I have no idea how to make eproject work, so ¯\_(ツ)_/¯.

*** "Where forth art thou Git?" | Looking for Githaska
    
Yes, I make terrible puns. Just move up until we find the git folder.

#+BEGIN_SRC emacs-lisp
    (defun find-git-repo (dir)
        (if (string= "/" dir)
            nil
            (if (file-exists-p (expand-file-name ".git/" dir))
                dir
            (find-git-repo (expand-file-name "../" dir)))))
#+END_SRC

*** Project Root
    
Find the project root.

#+BEGIN_SRC emacs-lisp
    (defun find-project-root ()
        (interactive)
        (if (ignore-errors (eproject-root))
            (eproject-root)
            (or (find-git-repo (buffer-file-name)) (file-name-directory (buffer-file-name)))))
#+END_SRC

*** Namsepace-ify
    
Create the namespace.

#+BEGIN_SRC emacs-lisp

    (defun file-path-to-namespace ()
        (interactive)
        (let (
                (root (find-project-root))
                (base (file-name-nondirectory buffer-file-name))
                )
            (capitalize (substring (replace-regexp-in-string "/" "\\" (substring buffer-file-name (length root) (* -1 (length base))) t t) 0 -1))
            )
        )

#+END_SRC

* Extras

#+BEGIN_SRC emacs-lisp
    (powerline-default-theme)
#+END_SRC
