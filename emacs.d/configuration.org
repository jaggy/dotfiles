#+TITLE: Emacs Configuration
I'm moving from vim after a few years 'cause I watched [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Aaron Bieber's talk]] about using Evil mode.

Kinda want to try all of this out since LISP is much more manageable than VimL TBH. ¯\_(ツ)_/¯

Using Org Mode as the config though, I learned it from [[https://www.youtube.com/watch?v=SzA2YODtgK4&t=3041s][Harry Schwart's Org Mode talk]].

* Before The Evil
Pre-configure the editor before we enable evil mode.

Disable the jump so we can use tab to expand subtrees. [[http://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working][Found the solution here.]]

#+BEGIN_SRC emacs-lisp
    (setq evil-want-C-i-jump nil)
#+END_SRC
* The Things We Depend On
** Sources
   Just followed the package list from [[http://blog.aaronbieber.com/2015/05/24/from-vim-to-emacs-in-fourteen-days.html]["From Vim to Emacs in Fourteen Days"]].

#+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages"))

    (setq package-enable-at-startup nil)
    (package-initialize)
#+END_SRC

** Package List
I wish I knew how to clean this up more. I need to lookup how other people do this scheisse.

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
        '(package-selected-packages
            (quote
                (
                    ;; EVIIIIIIIIIIIIIL
                    evil evil-leader evil-surround evil-visualstar evil-terminal-cursor-changer
                    evil-org evil-vimish-fold

                    ;; Theming
                    solarized-theme mustard-theme
                    smart-mode-line-powerline-theme smart-mode-line

                    ;; Fuzzy Finder
                    helm projectile helm-projectile helm-ag

                    ;; Web Stuff
                    php-mode web-mode emmet-mode vue-mode markdown-mode yaml-mode
                    rjsx-mode pug-mode

                    ;; Generic Editor Stuff
                    magit yasnippet key-chord neotree linum-relative flycheck git-gutter
                    column-marker elixir-mode emamux kotlin-mode

                    ;; PHP Stuff
                    phpunit

                    ;; Helpers
                    string-inflection inflections
                )
            )
        )
    )
    (custom-set-faces)

    (require 'string-inflection)
    (require 'cl)
#+END_SRC

* The Basics
Everything that's about the editor's behavior.
** Use Spaces. Suck it Richard!

It's all the same when it runs through the compiler.

#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq tab-width 4)
    (defvaralias 'c-basic-offset 'tab-width)
    (defvaralias 'cperl-indent-level 'tab-width)

    (add-hook 'javascript-mode-hook (
        lambda()

        (setq tab-width 2)
        (setq js-indent-level 2)
    ))

    (add-hook 'vue-mode-hook (
        lambda()

        (setq tab-width 2)
        (setq js-indent-level 2)
    ))
#+END_SRC

** No Wrapping
#+BEGIN_SRC emacs-lisp
    (set-default 'truncate-lines t)
#+END_SRC
** Syntax Highlight Org Blocks

Let's make everything pretty.

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
#+END_SRC

** Backups Clutter the Filesystem

 Just use ~/tmp~ for the backups and the autosaves. It's so freakin' annoying. (╯°□°）╯︵ ┻━┻

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
    (setq make-backup-files nil)
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** Auto Pairing
#+BEGIN_SRC emacs-lisp
    (electric-pair-mode)
#+END_SRC
** Folding
#+BEGIN_SRC emacs-lisp
     (evil-vimish-fold-mode 1)
#+END_SRC

** Filetypes
*** Basic Configuration
All the boilerplate stuff.

#+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.tmux\\'" . conf-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.blade\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    (add-hook 'web-mode-hook  'emmet-mode)

#+END_SRC
*** [[https://github.com/fxbois/web-mode/issues/237][Highlight the matching pair.]]
#+BEGIN_SRC emacs-lisp
    (setq web-mode-enable-current-element-highlight 0)
#+END_SRC
*** pug-mode
#+BEGIN_SRC emacs-lisp
    (add-hook 'pug-mode-hook (
        lambda()

        (setq tab-width 4)
    ))
#+END_SRC
** Backspace!
#+BEGIN_SRC emacs-lisp
    (global-set-key [(control ?h)] 'delete-backward-char)
    (global-set-key [(control ?s)] 'save-buffer)
#+END_SRC
* Hacks
** Create the directory when making files
#+BEGIN_SRC emacs-lisp
     (defun create-non-existent-directory ()
          (let ((parent-directory (file-name-directory buffer-file-name)))
               (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
          (make-directory parent-directory t))))

     (add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC
** Supressing Errors
#+BEGIN_SRC emacs-lisp
    (setq ad-redefinition-action 'accept) ;; ad-handle-definition: `find-tag-noselect' got redefined
#+END_SRC
* I Feel Pretty
** Display ANSI Colors
#+BEGIN_SRC emacs-lisp
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
#+END_SRC
** Minimalize
Just keep everything simple.

#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (show-paren-mode 1)
    (global-linum-mode)
    (setq linum-relative-format " %3s ")
    (linum-relative-global-mode)
    (setq linum-relative-current-symbol "")

    (unless (display-graphic-p)
        (menu-bar-mode -1)
    )
#+END_SRC
** GUI
#+BEGIN_SRC emacs-lisp
    (when (string= window-system "mac")
        (set-default-font "Fira Code 14")
        (toggle-scroll-bar -1)
        (menu-bar-mode 1)
        (setq-default line-spacing 20)
        (redraw-frame (selected-frame))
        (mac-auto-operator-composition-mode)

        (add-to-list 'default-frame-alist '(height . 40))
        (add-to-list 'default-frame-alist '(width . 120))

        (set-face-background 'linum "#191919")
        (set-face-background 'linum-relative-current-face "#191919")
    )
#+END_SRC
** [[http://www.writeups.org/wp-content/uploads/Invisible-Boy-Mystery-Men-Kel-Mitchell-a.jpg]["Nobody Look at Me!]]
*** Show Me Everything!

#+BEGIN_SRC emacs-lisp
    (global-whitespace-mode 1)
#+END_SRC

*** Limit Invisibles Shown

Display the only ones we need to see: *Trailing Spaces*, and the dreaded *Tabs*.

#+BEGIN_SRC emacs-lisp
    (setq whitespace-style '(face tabs trailing tab-mark))
#+END_SRC

*** Prettify

Update the pretty colors.

#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'whitespace-space nil :background nil :foreground "green")
#+END_SRC
** [[http://i1.kym-cdn.com/photos/images/newsfeed/000/657/441/933.gif]["Feed Me and Tell Me I'm Pretty!"]]
*** Theme
#+BEGIN_SRC emacs-lisp
    ;; (setq solarized-high-contrast-mode-line t)

    ;; (color-theme-sanityinc-tomorrow-day)

    ;; (if (string= system-name "a.local")
    ;;     (load-theme 'mustard t)
    ;;     (load-theme 'solarized-light t))
    ;; (require 'color-theme-sanityinc-tomorrow)

    (load-theme 'mustard t)
#+END_SRC
*** Smart Mode Line
This looks like a /much/ more better alternative for powerline.

#+BEGIN_SRC emacs-lisp
    (setq sml/theme 'respectful)
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
#+END_SRC
** Override the Theme
   Let's override theme colors here.

#+BEGIN_SRC emacs-lisp
    (defun override-mustard-theme ()
        (interactive)
        (set-face-background 'default "black")
        (set-face-background 'linum "black")
        (set-face-foreground 'vertical-border "black")
        (set-face-background 'vertical-border "black")
        (set-face-background 'org-warning "black")
        (set-face-background 'mode-line "#303030")

        (set-face-foreground 'linum-relative-current-face "white")
        (set-face-background 'linum-relative-current-face "black")

        (set-face-foreground 'font-lock-doc-face "#888888")
        (set-face-foreground 'font-lock-string-face "#ffd771")

         (add-hook 'web-mode-hook (
            lambda()
                (set-face-background 'web-mode-current-element-highlight-face "#222222")
                (set-face-foreground 'web-mode-doctype-face                   "blue")
                (set-face-foreground 'web-mode-html-tag-bracket-face          "blue")
                (set-face-foreground 'web-mode-current-element-highlight-face "blue")
                (set-face-foreground 'web-mode-html-tag-face                  "yellow")
                (set-face-foreground 'web-mode-current-element-highlight-face "yellow")
                (set-face-foreground 'web-mode-html-attr-name-face            "#87f48c")
                (set-face-foreground 'web-mode-html-attr-value-face           "#ba8baf")

                (set-face-foreground 'web-mode-block-control-face             "#5fd7ff")
                (set-face-foreground 'web-mode-block-delimiter-face           "#5fd7ff")
        ))

         (add-hook 'vue-mode-hook (
            lambda()
                (set-face-background 'mmm-default-submode-face "black")
        ))
    )

    (when (not window-system)
        (override-mustard-theme)
    )
#+END_SRC
** Change Cursor on States
Using the [[https://github.com/7696122/evil-terminal-cursor-changer][evil-terminal-cursor-changer]], copy every config.

Change the cursor different states.

#+BEGIN_SRC emacs-lisp
    (unless (display-graphic-p)
         (require 'evil-terminal-cursor-changer)
         (evil-terminal-cursor-changer-activate) ; or (etcc-on)
    )

     (setq evil-motion-state-cursor 'box)  ; █
     (setq evil-visual-state-cursor 'box)  ; █
     (setq evil-normal-state-cursor 'box)  ; █
     (setq evil-insert-state-cursor 'bar)  ; ⎸
     (setq evil-emacs-state-cursor  'hbar) ; _
#+END_SRC

** Rulers
#+BEGIN_SRC emacs-lisp
    (add-hook 'php-mode-hook (
        lambda()

        (column-marker-1 80)
        (set-face-background 'column-marker-1 "dark red")
    ))
#+END_SRC
* Every Villain is Lemons
Everything Evil specific would be here.

Let's make everything feel a bit more vim-like shall we?

#+BEGIN_SRC emacs-lisp
    (global-evil-leader-mode)
    (global-evil-surround-mode 1)

    (evil-mode 1)

    (evil-leader/set-leader ",")
    (evil-leader/set-key
        "g" 'magit-status
        "x" 'helm-M-x
        "tcc" 'phpunit-current-class
        "tct" 'phpunit-current-test
        "tcp" 'phpunit-current-project)

    (require 'evil-org)
#+END_SRC
* Org Mode
Let's set up the org mode config here.
** Todo States
#+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
           '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED" "WONTFIX")
             (sequence "PAY" "|" "PAID")))

    (setq org-todo-keyword-faces
        '(("PAY" . (:background "red" :foreground "black" :weight bold))))
#+END_SRC
** Agenda Files
Set the agenda files.

#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
    (setq org-log-done 'time)
#+END_SRC
** Mode Specific

We'll put here everything specific for org mode.

#+BEGIN_SRC emacs-lisp
    (setq-default org-tags-column -120)
#+END_SRC
* Plugin Config
** Git Gutter
#+BEGIN_SRC emacs-lisp
    (global-git-gutter-mode t)

    (git-gutter:linum-setup)
    (set-face-background 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:added "green")

    (set-face-background 'git-gutter:modified "yellow")
    (set-face-foreground 'git-gutter:modified "yellow")

    (set-face-background 'git-gutter:deleted "red")
    (set-face-foreground 'git-gutter:deleted "red")
#+END_SRC
** [[https://github.com/emacs-helm/helm#introduction][Helm]]
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC
** [[https://github.com/bbatsov/projectile][Projectile: Fuzzy Finder]]
Integrated HELM to have better fuzzy finding support and a better UI feel to it.

Notes for shortcuts:
- <kbd>control-c</kbd> + <kbd>o</kdb>

Rebind the ~c-h~ into backspace.

#+BEGIN_SRC emacs-lisp
    (projectile-global-mode)
    (helm-projectile-on)

    (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)
    (evil-leader/set-key "TAB" 'helm-projectile-switch-project)

    (add-hook 'projectile-find-dir-hook 'laravel-mode)

    (define-key helm-map (kbd "C-h") 'delete-backward-char)
#+END_SRC

** [[https://github.com/jaypei/emacs-neotree][Neotree]]
#+BEGIN_SRC emacs-lisp
    (require 'neotree)
    (setq neo-theme (if (display-graphic-p) 'arrow))
    (define-key evil-normal-state-map (kbd "C-e") 'neotree-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC
** [[https://github.com/joaotavora/yasnippet][yasnippet]]

#+BEGIN_SRC emacs-lisp
    (setq yas-snippet-dirs
        '("~/.dotfiles/emacs.d/snippets")
    )

    (yas-global-mode 1)

    (evil-define-key 'insert emmet-mode-keymap (kbd "TAB") 'yas/expand)
#+END_SRC

** Emmet
#+BEGIN_SRC emacs-lisp
    (evil-define-key 'insert emmet-mode-keymap (kbd "TAB") 'emmet-expand-yas)

    (add-hook 'emmet-mode-hook (
        lambda ()
            (setq emmet-indentation 4)
    ))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
    (make-face-bold 'font-lock-type-face)
    (make-face-bold 'font-lock-constant-face)
    (make-face-bold 'web-mode-block-control-face)
#+END_SRC
* Keybindings
** Vim-esque
*** Aligning Things
We do something vim-plug-esque
#+BEGIN_SRC 
    ;; (define-key evil-visual-state-map (kbd "ga") 'align-regexp)
    ;; (key-chord-define evil-visual-state-map (kbd "ga") 'align-regexp)
#+END_SRC
*** COMMENT ON ALL THE THINGS!

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-\\") 'comment-line)
    (define-key evil-visual-state-map (kbd "C-\\") 'comment-line)
#+END_SRC
*** Colon Cancer
I /really/, /really/ hate pressing shift to open up the ex menu.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd ";") 'evil-ex)
    (define-key evil-visual-state-map (kbd ";") 'evil-ex)
#+END_SRC

*** +Panel+ Window Management
It's called windows here!!!

**** Split horizontally and move right.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-w |") (
        lambda() (interactive)
            (split-window-horizontally)
            (windmove-right)
            (balance-windows)
    ))
#+END_SRC

**** Split vertically and move down.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-w -") (
        lambda() (interactive)
            (split-window-vertically)
            (windmove-down)
            (balance-windows)
    ))
#+END_SRC

**** Equalize the sizes of the windows

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "=") 'balance-windows)
#+END_SRC

** Inserting with [[https://www.emacswiki.org/emacs/KeyChord][Key Chord]]
Not sure if the delay'll be fine.

#+BEGIN_SRC emacs-lisp
    (setq key-chord-two-keys-delay 0.4)

    (key-chord-define evil-insert-state-map (kbd "0-") (kbd "->"))
    ;; This is when the numbers are remapped.
    (key-chord-define evil-insert-state-map (kbd ")-") (kbd "->"))

    (key-chord-define evil-insert-state-map (kbd "-=") (kbd "=>"))

    (key-chord-mode 1)
#+END_SRC
* Custom Functions
Should this really be placed in this org file?

** Table name from the field
#+BEGIN_SRC emacs-lisp
    (defun table-name-from-field (field)
        (pluralize-string (replace-regexp-in-string "_id" "" field))
    )
#+END_SRC

** Convert resource into controller
If the key is a resource, we cam map through every preceeding parent and make them sigular.

~users.roles => UserRolesControll~

#+BEGIN_SRC emacs-lisp
    (defun laravel-create-resource-controller (resource)
        (setq segments  (split-string resource "\\."))
        (setq resources (subseq segments 0 -1))
        (setq model     (last segments))
        (setq classes   (append (mapcar 'singularize-string resources) model))

        (concat (string-inflection-camelcase-function (mapconcat 'identity classes "_")) "Controller")
    )
#+END_SRC
** Class Name
Just fetch the class name of the file.

#+BEGIN_SRC emacs-lisp
    (defun php-class-name (filename)
        (file-name-nondirectory (file-name-sans-extension filename))
    )
#+END_SRC
** PHP Namespaces
I need to detect namespaces dynamically for my PHP files and I ran across [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][this article]].

Don't really know how it works so I'll just paste it all here.

I have no idea how to make eproject work, so ¯\_(ツ)_/¯.

*** Looking for Git
Yes, I make terrible puns. Just move up until we find the git folder.

#+BEGIN_SRC emacs-lisp
    (defun find-git-repo (dir)
        (if (string= "/" dir)
            nil
            (if (file-exists-p (expand-file-name ".git/" dir))
                dir
            (find-git-repo (expand-file-name "../" dir)))))
#+END_SRC

*** Project Root
Find the project root.

#+BEGIN_SRC emacs-lisp
    (defun find-project-root ()
        (interactive)
        (if (ignore-errors (eproject-root))
            (eproject-root)
            (or (find-git-repo (buffer-file-name)) (file-name-directory (buffer-file-name)))))
#+END_SRC

*** Namsepace-ify
Create the namespace.

#+BEGIN_SRC emacs-lisp

    (defun file-path-to-namespace ()
        (interactive)
        (let (
                (root (find-project-root))
                (base (file-name-nondirectory buffer-file-name))
                )
            (capitalize (substring (replace-regexp-in-string "/" "\\" (substring buffer-file-name (length root) (* -1 (length base))) t t) 0 -1))
            )
        )

#+END_SRC

** Laravel Mode
#+BEGIN_SRC emacs-lisp
    (defun laravel-mode ()
        (interactive)
    )
#+END_SRC
