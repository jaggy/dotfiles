#+TITLE: Emacs Configuration
I'm moving from vim after a few years 'cause I watched [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Aaron Bieber's talk]] about using Evil mode.

Kinda want to try all of this out since LISP is much more manageable than VimL TBH. ¯\_(ツ)_/¯

Using Org Mode as the config though, I learned it from [[https://www.youtube.com/watch?v=SzA2YODtgK4&t=3041s][Harry Schwart's Org Mode talk]].

* The Things We Depend On
** Installing
Just followed the package list from [[http://blog.aaronbieber.com/2015/05/24/from-vim-to-emacs-in-fourteen-days.html]["From Vim to Emacs in Fourteen Days"]].

#+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

    (setq package-enable-at-startup nil)
    (package-initialize)
#+END_SRC

** Package List
I wish I knew how to clean this up more. I need to lookup how other people do this scheisse.

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(package-selected-packages
       (quote
        (
            evil evil-leader evil-surround evil-visualstar
            evil-org
            magit
            mustard-theme
            helm projectile helm-projectile
            php-mode web-mode flycheck
            yasnippet key-chord neotree powerline linum-relative
        )
       )))
    (custom-set-faces
     )
#+END_SRC

* The Basics
Everything that's about the editor's behavior.
** Use Spaces. Suck it Richard!

It's all the same when it runs through the compiler.

#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
#+END_SRC

** No Wrapping
#+BEGIN_SRC emacs-lisp
    (set-default 'truncate-lines t)
#+END_SRC
** Syntax Highlight Org Blocks

Let's make everything pretty.

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
#+END_SRC

** Backups Clutter the Filesystem

 Just use ~/tmp~ for the backups and the autosaves. It's so freakin' annoying. (╯°□°）╯︵ ┻━┻

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
    (setq make-backup-files nil)
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

* I Feel Pretty
** Minimalize
Just keep everything simple.

#+BEGIN_SRC emacs-lisp
    (setq tab-width 4)
    (defvaralias 'c-basic-offset 'tab-width)
    (defvaralias 'cperl-indent-level 'tab-width)
    (show-paren-mode 1)
    (global-linum-mode)
    (setq linum-relative-format "%3s ")
    (linum-relative-global-mode)
    (menu-bar-mode -1)
#+END_SRC
** [[http://www.writeups.org/wp-content/uploads/Invisible-Boy-Mystery-Men-Kel-Mitchell-a.jpg]["Nobody Look at Me!]]
*** Show Me Everything!

#+BEGIN_SRC emacs-lisp
    (global-whitespace-mode 1)
#+END_SRC

*** Limit Invisibles Shown

Display the only ones we need to see: *Trailing Spaces*, and the dreaded *Tabs*.

#+BEGIN_SRC emacs-lisp
    (setq whitespace-style '(face tabs trailing tab-mark))
#+END_SRC

*** Prettify

Update the pretty colors.

#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'whitespace-space nil :background nil :foreground "green")
#+END_SRC
** [[http://i1.kym-cdn.com/photos/images/newsfeed/000/657/441/933.gif]["Feed Me and Tell Me I'm Pretty!"]]
*** Theme
#+BEGIN_SRC emacs-lisp
    (load-theme 'mustard t)
#+END_SRC
*** Powerline
#+BEGIN_SRC emacs-lisp
    (powerline-default-theme)
#+END_SRC
* Before The Evil
Pre-configure the editor before we enable evil mode.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

* Every Villain is Lemons
Everything Evil specific would be here.

Let's make everything feel a bit more vim-like shall we?

#+BEGIN_SRC emacs-lisp
    (global-evil-leader-mode)
    (evil-mode 1)
    (global-evil-surround-mode 1)
#+END_SRC

* Plugin Config
** [[https://github.com/emacs-helm/helm#introduction][Helm]]
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC
** [[https://github.com/bbatsov/projectile][Projectile: Fuzzy Finder]]
Integrated HELM to have better fuzzy finding support and a better UI feel to it.

Notes for shortcuts:
- <kbd>control-c</kbd> + <kbd>o</kdb>

#+BEGIN_SRC emacs-lisp
    (projectile-global-mode)
    (helm-projectile-on)

    (define-key evil-normal-state-map (kbd "C-p")       'helm-projectile)
#+END_SRC

** [[https://github.com/joaotavora/yasnippet][yasnippet]]

#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    (yas-global-mode 1)
#+END_SRC

** [[https://github.com/jaypei/emacs-neotree][Neotree]]
#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-e") 'neotree-toggle)
#+END_SRC
** Magit
Okay, I have to admit, this one is freakin' awesome.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd ", g") 'magit-status)
#+END_SRC
** Web Mode
*** Basic Configuration
All the boilerplate stuff.
#+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
    (add-to-list 'auto-mode-alist '("\\.blade\\.php\\'" . web-mode))
#+END_SRC
*** [[https://github.com/fxbois/web-mode/issues/237][Highlight the matching pair.]]
#+BEGIN_SRC emacs-lisp
    (setq web-mode-enable-current-element-highlight t)
#+END_SRC
* Keybindings
** Vim-esque
*** Colon Cancer
I /really/, /really/ hate pressing shift to open up the ex menu.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd ";") 'evil-ex)
#+END_SRC

*** +Panel+ Window Management
It's called windows here!!!

**** Split horizontally and move right.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-w |") (
        lambda() (interactive)
            (split-window-horizontally)
            (windmove-right)
    ))
#+END_SRC

**** Split vertically and move down.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-w -") (
        lambda() (interactive)
            (split-window-vertically)
            (windmove-down)
    ))
#+END_SRC

** Inserting with [[https://www.emacswiki.org/emacs/KeyChord][Key Chord]]
Not sure if the delay'll be fine.

#+BEGIN_SRC emacs-lisp
    (setq key-chord-two-keys-delay 0.4)

    (key-chord-define evil-insert-state-map (kbd "0-") (kbd "->"))
    (key-chord-define evil-insert-state-map (kbd "-=") (kbd "=>"))

    (key-chord-mode 1)
#+END_SRC

* Custom Functions
Should this really be placed in this org file?

** PHP Namespaces
I need to detect namespaces dynamically for my PHP files and I ran across [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][this article]].

Don't really know how it works so I'll just paste it all here.

I have no idea how to make eproject work, so ¯\_(ツ)_/¯.

*** "Where forth art thou Git?" | Looking for Githaska
Yes, I make terrible puns. Just move up until we find the git folder.

#+BEGIN_SRC emacs-lisp
    (defun find-git-repo (dir)
        (if (string= "/" dir)
            nil
            (if (file-exists-p (expand-file-name ".git/" dir))
                dir
            (find-git-repo (expand-file-name "../" dir)))))
#+END_SRC

*** Project Root
Find the project root.

#+BEGIN_SRC emacs-lisp
    (defun find-project-root ()
        (interactive)
        (if (ignore-errors (eproject-root))
            (eproject-root)
            (or (find-git-repo (buffer-file-name)) (file-name-directory (buffer-file-name)))))
#+END_SRC

*** Namsepace-ify
Create the namespace.

#+BEGIN_SRC emacs-lisp

    (defun file-path-to-namespace ()
        (interactive)
        (let (
                (root (find-project-root))
                (base (file-name-nondirectory buffer-file-name))
                )
            (capitalize (substring (replace-regexp-in-string "/" "\\" (substring buffer-file-name (length root) (* -1 (length base))) t t) 0 -1))
            )
        )

#+END_SRC
